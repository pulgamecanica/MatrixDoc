searchState.loadedDescShard("matrix", 0, "Vector and Matrix Library\nThe linear interpolation module provides a generic …\nThe matrix module provides a generic <code>Matrix</code> struct and …\nThe scalar module provides a trait generic for scalars.\nThe vector module provides a generic <code>Vector</code> struct and …\nCompute the linear interpolation (lerp), which takes two …\nA struct representing a mathematical matrix.\nAdds another <code>Matrix&lt;K&gt;</code> to the calling <code>Matrix&lt;K&gt;</code>.\nReturns the number of columns in the matrix.\nComputes the determinant of the matrix, supporting …\nComputes the determinant of a 2x2 matrix.\nComputes the determinant of a 3x3 matrix using cofactor …\nComputes the determinant of a 4x4 matrix using cofactor …\nReshapes the <code>Martix</code> into a <code>Vector</code> by flattening its rows.\nImplement fmt to display a matrix whenever you want\nThe From trait is implemented to convert a 2D array …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns whether the matrix is square.\nReturns the minor matrix by removing the specified row and …\nMultiplies <code>self</code> with another matrix <code>other</code>.\nMultiplies the matrix <code>self</code> by a vector <code>vec</code>, producing a …\nCreates a new <code>Matrix&lt;K&gt;</code> from a matrix of matrices (rows of …\nPrints the contents of the matrix to the standard output.\nConverts the matrix to its reduced row-echelon form (RREF) …\nReturns the number of rows in the matrix.\nScales the calling <code>Matrix&lt;K&gt;</code> by a factor <code>a</code>.\nReturns the size (i.e., number of rows and columns) of the …\nSubstracts another <code>Matrix&lt;K&gt;</code> to the calling <code>Matrix&lt;K&gt;</code>.\nComputes the trace of a square matrix, which is the sum of …\nReturns the transpose of the matrix.\nA trait for types that act as scalars in mathematical …\nFused Multiply-Add (FMA): Default implementation that …\nFused Multiply-Sub (FMS): Default implementation that …\nA struct representing a mathematical vector that is …\nAdds another <code>Vector&lt;K&gt;</code> to the calling <code>Vector&lt;K&gt;</code>.\nCalculates the cosine of the angle between two <code>Vector</code>s, <code>u</code> …\nComputes the cross product of two 3-dimensional <code>Vector</code>s, <code>u</code> …\nComputes the dot product with another <code>Vector&lt;K&gt;</code>.\nFormats the <code>Vector&lt;K&gt;</code> for display.\nConverts an array of type <code>[K; N]</code> into a <code>Vector&lt;K&gt;</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nComputes the linear combination of a set of vectors using …\nCreates a new <code>Vector&lt;K&gt;</code> from a vector of <code>K</code> values.\nComputes the 2-norm (Euclidean norm) of the vector.\nComputes the 1-norm (Manhattan norm) of the vector.\nComputes the ∞-norm (supremum or maximum norm) of the …\nPrints the contents of the <code>Vector</code> to standard output.\nReshapes the <code>Vector</code> into a matrix with specified …\nScales the calling <code>Vector&lt;K&gt;</code> by a factor <code>a</code>.\nReturns the number of elements in the <code>Vector</code>.\nSubtracts another <code>Vector&lt;K&gt;</code> from the calling <code>Vector&lt;K&gt;</code>.")